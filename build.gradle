buildscript {
    ext {
        dockerVersion = 'latest'
    }
}

plugins {
    id 'war'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id 'distribution'
    id "org.hidetake.swagger.generator" version "2.18.2"
}

group = 'home.antonkirvel'
version = "${version != 'unspecified' ? version : '0.0.1-SNAPSHOT'}"
sourceCompatibility = '1.8'
def buildversion = System.getenv('BUILD_VERSION') ?: "0000000000.0001"

springBoot {
    buildInfo {
        properties {
            additional = [
                    'buildversion': buildversion
            ]
        }
    }
}

apply plugin: 'distribution'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.security:spring-security-core:5.4.1'
    implementation 'org.springframework.security:spring-security-config:5.4.1'
    implementation 'org.springframework.security:spring-security-web:5.4.1'
    implementation 'io.swagger:swagger-annotations:1.5.22'
    implementation 'org.springdoc:springdoc-openapi-ui:1.3.9'
    implementation 'org.springdoc:springdoc-openapi-security:1.3.9'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'commons-codec:commons-codec:1.14'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.20'
}

distributions {
    main {
        baseName = "spike"
        contents {
            into("web") {
                from('build/libs')
            }
        }
    }
}

configurations {
    customArch
}

artifacts {
    customArch file(distTar.archiveFile)
}

bootWar {
    archiveVersion = ""
}

test {
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform {
        includeTags 'unit'
        excludeTags 'integration'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
}

bootRun {
    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n']
}